#!/usr/bin/env node

const path = require('path');

const HTTPConsole = require('../lib/http-console');
const OpenAPICompleter = require('../lib/completers/openapi.js')
const HistoryCompleter = require('../lib/completers/history.js')

const help = [
  'usage: http-console [protocol://][username:password@][host]:port [options]',
  '',
  'options:',
  '    --cookies      remember cookies',
  '-v, --verbose      print requests',
  '    --json         set "Content-Type" header to application/json',
  '    --notimeout    don\'t timeout requests',
  '-c, --config       config file, executed on startup',
  '    --version      print version',
  '    --openapi      enables OpenAPI autocompletion',
  '-h, --help         display this message'
].join('\n');

var argv = process.argv.slice(2), args = [],
    arg, option,
    options = {
      rememberCookies: true,
      json:            false,
      timeout:         true,
      verbose:         false,
      completers:      [ new HistoryCompleter() ]
    };

if (typeof process.env.NO_COLOR !== 'undefined') options.colors = false

while ((arg = argv.shift())) {
  if ((option = arg.match(/^--?([\w-]+)$/))) {
    switch (option[1]) {
      case 'cookies':
        options.rememberCookies = true;
        break;
      case 'no-cookies':
        options.rememberCookies = false;
        break;
      case 'ssl':
        options.useSSL = true;
        break;
      case 'v':
      case 'verbose':
        options.verbose = true;
        break;
      case 'version':
        console.log('http-console v' + httpConsole.version);
        process.exit(0);
      case 'json':
        options.json = true;
        break;
      case 'notimeout':
        options.timeout = false;
        break;
      case 'c':
      case 'config':
        options.configFile = argv.shift();
        break;
      case 'openapi':
        options.completers.push(new OpenAPICompleter())
        break;
      case 'h':
      case 'help':
        console.log(help)
        process.exit(0);
      default:
        console.log("http-console: unrecognized option '" + option[0] + "'");
        process.exit(1);
    }
  } else {
    args.push(arg);
  }
}

const url = args.shift()
if (!url) {
  console.log(help)
  process.exit(1)
}

const c = new HTTPConsole({
  baseUrl: url,
  ...options
})
c.start()
